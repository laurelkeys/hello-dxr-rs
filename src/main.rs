//
// References:
// - https://github.com/microsoft/DirectX-Graphics-Samples/tree/master/Samples/Desktop/D3D12Raytracing
// - https://learn.microsoft.com/en-us/windows/win32/direct3d12/directx-12-programming-guide
// - https://github.com/microsoft/windows-rs/tree/master/crates/samples/windows/direct3d12
// - https://landelare.github.io/2023/02/18/dxr-tutorial.html
//

use windows::Win32::{
    Foundation::*,
    Graphics::Gdi::InvalidateRect,
    UI::{HiDpi::*, WindowsAndMessaging::*},
};

/// Generated by `dxc shader.hlsl /T lib_6_3 /Fo shader.o`.
const COMPILED_SHADER: &[u8] = include_bytes!("shader.o");

fn main() {
    println!("Hello, DXR!");

    println!("Shader byte count: {}", COMPILED_SHADER.len());

    unsafe {
        // @Todo: add a CLI option to DPI_AWARENESS_CONTEXT_UNAWARE (e.g. --dpi-unaware).
        SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2).unwrap();
    }

    let class_name = windows::core::w!("HelloDxrClass");

    let wcw = WNDCLASSW {
        lpfnWndProc: Some(wnd_proc),
        hCursor: unsafe { LoadCursorW(None, IDC_ARROW) }.unwrap(),
        lpszClassName: class_name,
        ..Default::default()
    };
    let atom = unsafe { RegisterClassW(&wcw) };
    assert_ne!(atom, 0, "RegisterClassW: {:?}", unsafe { GetLastError() });

    let hwnd = unsafe {
        let hwnd = CreateWindowExW(
            WINDOW_EX_STYLE::default(),
            class_name,
            windows::core::w!("Hello DXR"),
            WS_VISIBLE | WS_OVERLAPPEDWINDOW,
            CW_USEDEFAULT,
            CW_USEDEFAULT,
            CW_USEDEFAULT,
            CW_USEDEFAULT,
            None,
            None,
            None,
            None,
        );
        assert!(hwnd.is_ok(), "CreateWindowExW: {:?}", hwnd);
        hwnd.unwrap()
    };

    init_everything(hwnd);

    let mut msg = MSG::default();
    loop {
        while unsafe { PeekMessageW(&mut msg, None, 0, 0, PM_REMOVE).as_bool() } {
            if msg.message == WM_QUIT {
                return;
            }

            unsafe {
                let translated = TranslateMessage(&msg).as_bool();
                // @Temporary: assert!(translated, "TranslateMessage: {:?}", GetLastError());
                DispatchMessageW(&msg);
            }
        }

        render_frame();
    }
}

fn render_frame() {
    // @Temporary: todo!()
}

fn init_everything(hwnd: HWND) {
    // Init Device.
    // Init Surfaces.
    // Init Command.
    // Init Meshes.
    // Init BottomLevel.
    // Init Scene.
    // Init TopLevel.
    // Init RootSignature.
    // Init Pipeline.
}

extern "system" fn resize(hwnd: HWND) {
    // @Temporary: todo!();
}

extern "system" fn wnd_proc(hwnd: HWND, msg: u32, wparam: WPARAM, lparam: LPARAM) -> LRESULT {
    match msg {
        WM_CLOSE | WM_DESTROY => unsafe { PostQuitMessage(0) },
        WM_SIZING | WM_SIZE => resize(hwnd),
        _ => {}
    }

    unsafe { DefWindowProcW(hwnd, msg, wparam, lparam) }
}
